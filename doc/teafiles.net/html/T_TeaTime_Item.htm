<html xmlns:MSHelp="http://msdn.microsoft.com/mshelp" xmlns:mshelp="http://msdn.microsoft.com/mshelp" xmlns:ddue="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:msxsl="urn:schemas-microsoft-com:xslt">
  <head>
    <META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=UTF-8" />
    <META NAME="save" CONTENT="history" />
    <title>Item Class</title>
    <meta name="Language" content="en-us" />
    <meta name="System.Keywords" content="Item class" />
    <meta name="System.Keywords" content="TeaTime.Item class" />
    <meta name="System.Keywords" content="Item class, about Item class" />
    <meta name="Microsoft.Help.F1" content="TeaTime.Item" />
    <meta name="Microsoft.Help.Id" content="T:TeaTime.Item" />
    <meta name="Description" content="Holds the values of an Item when reading a TeaFile untyped." />
    <meta name="Microsoft.Help.ContentType" content="Reference" />
    <link rel="stylesheet" type="text/css" href="../styles/Presentation.css" />
    <link rel="stylesheet" type="text/css" href="ms-help://Hx/HxRuntime/HxLink.css" />
    <script type="text/javascript" src="../scripts/EventUtilities.js"> </script>
    <script type="text/javascript" src="../scripts/SplitScreen.js"> </script>
    <script type="text/javascript" src="../scripts/Dropdown.js"> </script>
    <script type="text/javascript" src="../scripts/script_manifold.js"> </script>
    <script type="text/javascript" src="../scripts/script_feedBack.js"> </script>
    <script type="text/javascript" src="../scripts/CheckboxMenu.js"> </script>
    <script type="text/javascript" src="../scripts/CommonUtilities.js"> </script>
    <meta name="container" content="TeaTime" />
    <meta name="file" content="T_TeaTime_Item" />
    <meta name="guid" content="T_TeaTime_Item" />
    <xml>
      <MSHelp:Attr Name="AssetID" Value="T:TeaTime.Item" />
      <MSHelp:TOCTitle Title="Item Class" />
      <MSHelp:RLTitle Title="Item Class (TeaTime)" />
      <MSHelp:Keyword Index="A" Term="T:TeaTime.Item" />
      <MSHelp:Keyword Index="A" Term="frlrfTeaTimeItemClassTopic" />
      <MSHelp:Keyword Index="K" Term="Item class" />
      <MSHelp:Keyword Index="K" Term="TeaTime.Item class" />
      <MSHelp:Keyword Index="K" Term="Item class, about Item class" />
      <MSHelp:Keyword Index="F" Term="TeaTime.Item" />
      <MSHelp:Attr Name="HelpPriority" Value="2" />
      <MSHelp:Attr Name="APIType" Value="Managed" />
      <MSHelp:Attr Name="APILocation" Value="DiscreteLogics.TeaFiles.dll" />
      <MSHelp:Attr Name="APIName" Value="TeaTime.Item" />
      <MSHelp:Attr Name="DevLang" Value="CSharp" />
      <MSHelp:Attr Name="Locale" Value="en-us" />
      <MSHelp:Attr Name="TopicType" Value="kbSyntax" />
      <MSHelp:Attr Name="TopicType" Value="apiref" />
      <MSHelp:Attr Name="Abstract" Value="Holds the values of an Item when reading a TeaFile untyped." />
      <MSHelp:Attr Name="AssemblyVersion" Value="1.0.0.16" />
    </xml>
    <link type="text/css" rel="stylesheet" href="../styles/highlight.css" />
    <script type="text/javascript" src="../scripts/highlight.js"> </script>
  </head>
  <body>
    <input type="hidden" id="userDataCache" class="userDataStyle" />
    <input type="hidden" id="hiddenScrollOffset" />
    <img id="collapseImage" style="display:none; height:0; width:0;" src="../icons/collapse_all.gif" alt="Collapse image" title="Collapse image" />
    <img id="expandImage" style="display:none; height:0; width:0;" src="../icons/expand_all.gif" alt="Expand Image" title="Expand Image" />
    <img id="collapseAllImage" style="display:none; height:0; width:0;" src="../icons/collapse_all.gif" />
    <img id="expandAllImage" style="display:none; height:0; width:0;" src="../icons/expand_all.gif" />
    <img id="dropDownImage" style="display:none; height:0; width:0;" src="../icons/dropdown.gif" />
    <img id="dropDownHoverImage" style="display:none; height:0; width:0;" src="../icons/dropdownHover.gif" />
    <img id="copyImage" style="display:none; height:0; width:0;" src="../icons/copycode.gif" alt="Copy image" title="Copy image" />
    <img id="copyHoverImage" style="display:none; height:0; width:0;" src="../icons/copycodeHighlight.gif" alt="CopyHover image" title="CopyHover image" />
    <div id="header">
      <table id="topTable" cellspacing="0" cellpadding="0">
        <tr>
          <td>
            <span onclick="ExpandCollapseAll(toggleAllImage)" style="cursor:default;" onkeypress="ExpandCollapseAll_CheckKey(toggleAllImage, event)" tabindex="0">
              <img ID="toggleAllImage" class="toggleAll" src="../icons/collapse_all.gif" /> <label id="collapseAllLabel" for="toggleAllImage" style="display: none;">Collapse All</label><label id="expandAllLabel" for="toggleAllImage" style="display: none;">Expand All</label> </span>
          </td>
        </tr>
      </table>
      <div id="devlangsMenu">
        <input id="CSharpCheckbox" type="checkbox" data="CSharp,cs,'persist'" value="on" onClick="SetLanguage(this)" />
        <label class="checkboxLabel" for="CSharpCheckbox">C#</label>
        <br />
      </div>
      <table id="bottomTable" cellpadding="0" cellspacing="0">
        <tr id="headerTableRow2">
          <td align="left">
            <span id="nsrTitle">Item Class</span>
          </td>
        </tr>
        <tr id="headerTableRow3">
          <td align="left">
            <a href="AllMembers_T_TeaTime_Item.htm">Members</a> </td>
        </tr>
      </table>
      <table id="gradientTable">
        <tr>
          <td class="nsrBottom" background="../icons/gradient.gif" />
        </tr>
      </table>
    </div>
    <div id="mainSection">
      <div id="mainBody">
        <div id="allHistory" class="saveHistory" onsave="saveAll()" onload="loadAll()" />
        <span style="color: DarkGray"></span>
        <div class="summary">
             Holds the values of an Item when reading a TeaFile untyped.
             </div>
        <p />
        <b>Namespace:</b> <a href="N_TeaTime.htm">TeaTime</a><br /><b>Assembly:</b> <span sdata="assembly">DiscreteLogics.TeaFiles</span> (in DiscreteLogics.TeaFiles.dll) Version: 1.0.0.16 (1.0.0.16)<h1 class="heading">Syntax</h1><div id="syntaxCodeBlocks" class="code"><pre xml:space="preserve"><span class="keyword">public</span> <span class="keyword">class</span> <span class="identifier">Item</span></pre></div><h1 class="heading">Remarks</h1>
             If the type inside a TeaFile is not knnown or not available in the program, the file can be read untyped using <a href="T_TeaTime_TeaFile.htm">TeaFile</a>. 
             In contrast to <a href="T_TeaTime_TeaFile_1.htm">TeaFile<span class="languageSpecificText"><span class="cs">&lt;</span><span class="vb">(Of </span><span class="cpp">&lt;</span><span class="nu">(</span><span class="fs">&lt;'</span></span>T<span class="languageSpecificText"><span class="cs">&gt;</span><span class="vb">)</span><span class="cpp">&gt;</span><span class="nu">)</span><span class="fs">&gt;</span></span></a> which exposes each item by it's known type like <span class="code">Tick</span>, <a href="T_TeaTime_TeaFile.htm">TeaFile</a> exposes the 
             items as a collection of instances of this <span class="selflink">Item</span> class. It wraps an array of objects, each holding the value of a field of the 
             item. This item can be printed by calling its <a href="M_TeaTime_Item_ToString.htm">ToString<span class="languageSpecificText"><span class="cs">()</span><span class="cpp">()</span><span class="nu">()</span><span class="fs">()</span></span></a> method, or using <a href="M_TeaTime_ItemDescription_GetValueString.htm">GetValueString(Item)</a> 
             from <a href="T_TeaTime_ItemDescription.htm">ItemDescription</a>.
             <h1 class="heading">Examples</h1><span id="cbc_1" x-lang="CSharp" codeLanguage="CSharp"><div class="highlight-title"><span class="highlight-copycode" onkeypress="javascript:CopyColorizedCodeCheckKey(this.parentNode, event);" tabindex="0" onmouseover="CopyCodeChangeIcon(this)" onmouseout="CopyCodeChangeIcon(this)" onclick="javascript:CopyColorizedCode(this.parentNode);"><img style="margin-right: 5px;" src="../icons/copycode.gif" />Copy</span>C#</div><div class="code"><pre xml:space="preserve"><span class="highlight-keyword">struct</span> Tick
{
    <span class="highlight-keyword">public</span> Time Time;
    <span class="highlight-keyword">public</span> <span class="highlight-keyword">double</span> Price;
    <span class="highlight-keyword">public</span> <span class="highlight-keyword">long</span> Volume;
}

...

<span class="highlight-comment">// write typed</span>
<span class="highlight-keyword">using</span> (<span class="highlight-keyword">var</span> tf = TeaFile&lt;Tick&gt;.Create(<span class="highlight-literal">"acme.tea"</span>))
{
    tf.Write(<span class="highlight-keyword">new</span> Tick { Time = <span class="highlight-keyword">new</span> Time(<span class="highlight-number">2000</span>, <span class="highlight-number">3</span>, <span class="highlight-number">4</span>), Price = <span class="highlight-number">12.34</span>, Volume = <span class="highlight-number">7200</span> });
}

<span class="highlight-comment">// 1. read typed</span>
<span class="highlight-keyword">using</span> (<span class="highlight-keyword">var</span> tf = TeaFile&lt;Tick&gt;.OpenRead(<span class="highlight-literal">"acme.tea"</span>))
{
    Tick item = tf.Read();  <span class="highlight-comment">// typed read is convenient: we get a tpyed Tick back,</span>
    Time t = item.Time;     <span class="highlight-comment">// so access to its fields simply means acessing the fields of a Tick struct.</span>
    <span class="highlight-keyword">double</span> p = item.Price;
    <span class="highlight-keyword">long</span> v = item.Volume;
}

<span class="highlight-comment">// 2. read untyped</span>
<span class="highlight-comment">// if we do not have the type available or do not know what is inside the file,</span>
<span class="highlight-comment">// we can still read it untyped:</span>
<span class="highlight-keyword">using</span> (<span class="highlight-keyword">var</span> tf = TeaFile.OpenRead(<span class="highlight-literal">"acme.tea"</span>))
{
    Item item = tf.Read();      <span class="highlight-comment">// Here an item of type Item is returned, which holds the field values as an object[].</span>
    <span class="highlight-keyword">object</span> t = item.Values[<span class="highlight-number">0</span>];  <span class="highlight-comment">// The field values can be accessed by their field index</span>
    <span class="highlight-keyword">object</span> p = item.Values[<span class="highlight-number">1</span>];  <span class="highlight-comment">// The values inside this array still have the types Time, double and long, but</span>
    <span class="highlight-keyword">object</span> v = item.Values[<span class="highlight-number">2</span>];  <span class="highlight-comment">// we might not always know this at compile time. If we know it,</span>
                                <span class="highlight-comment">// a casts can be added:</span>
    Time tt = (Time) item.Values[<span class="highlight-number">0</span>];
    Console.WriteLine(item);    <span class="highlight-comment">// The implicit call of ToString() here will cause the output:</span>
                                <span class="highlight-comment">// 4.3.2000, 12.34, 7200</span>
}</pre></div></span>
             
             Some GUI controls (like grids) accept an object[] as the value for a row, which allows very simple binding of items.
             <h1 class="heading">See Also</h1><div class="seeAlsoStyle"><a href="AllMembers_T_TeaTime_Item.htm">Item Members</a></div><div class="seeAlsoStyle"><a href="N_TeaTime.htm">TeaTime Namespace</a></div></div>
      <div id="footer">
        <div class="footerLine">
          <img width="100%" height="3px" src="../icons/footer.gif" alt="Footer image" title="Footer image" />
        </div>
        <A NAME="feedback"></A>
        <span id="fb" class="feedbackcss"></span>
        <p />Send comments on this topic to
        <a id="HT_MailLink" href="mailto:teafiles.net%40discretelogics.com?Subject=DiscreteLogics - TeaFiles.Net">teafiles.net@discretelogics.com</a><script type="text/javascript">
        var HT_mailLink = document.getElementById("HT_MailLink");
        var HT_mailLinkText = HT_mailLink.innerHTML;
        HT_mailLink.href += ": " + document.title;
        HT_mailLink.innerHTML = HT_mailLinkText;
        </script><p /><a href="http://discretelogics.com/TeaFiles/License" target="_blank">License</a></div>
    </div>
  </body>
</html>